{"version":3,"file":"PluginTaskSchedulerImpl.cjs.js","sources":["../../../../src/entrypoints/scheduler/lib/PluginTaskSchedulerImpl.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootLifecycleService,\n  SchedulerService,\n  SchedulerServiceTaskDescriptor,\n  SchedulerServiceTaskFunction,\n  SchedulerServiceTaskInvocationDefinition,\n  SchedulerServiceTaskRunner,\n  SchedulerServiceTaskScheduleDefinition,\n} from '@backstage/backend-plugin-api';\nimport { Counter, Histogram, metrics, trace } from '@opentelemetry/api';\nimport { Knex } from 'knex';\nimport { Duration } from 'luxon';\nimport { LocalTaskWorker } from './LocalTaskWorker';\nimport { TaskWorker } from './TaskWorker';\nimport { TaskSettingsV2 } from './types';\nimport { delegateAbortController, TRACER_ID, validateId } from './util';\n\nconst tracer = trace.getTracer(TRACER_ID);\n\n/**\n * Implements the actual task management.\n */\nexport class PluginTaskSchedulerImpl implements SchedulerService {\n  private readonly localTasksById = new Map<string, LocalTaskWorker>();\n  private readonly allScheduledTasks: SchedulerServiceTaskDescriptor[] = [];\n  private readonly shutdownInitiated: Promise<boolean>;\n\n  private readonly counter: Counter;\n  private readonly duration: Histogram;\n\n  constructor(\n    private readonly databaseFactory: () => Promise<Knex>,\n    private readonly logger: LoggerService,\n    rootLifecycle?: RootLifecycleService,\n  ) {\n    const meter = metrics.getMeter('default');\n    this.counter = meter.createCounter('backend_tasks.task.runs.count', {\n      description: 'Total number of times a task has been run',\n    });\n    this.duration = meter.createHistogram('backend_tasks.task.runs.duration', {\n      description: 'Histogram of task run durations',\n      unit: 'seconds',\n    });\n    this.shutdownInitiated = new Promise(shutdownInitiated => {\n      rootLifecycle?.addShutdownHook(() => shutdownInitiated(true));\n    });\n  }\n\n  async triggerTask(id: string): Promise<void> {\n    const localTask = this.localTasksById.get(id);\n    if (localTask) {\n      localTask.trigger();\n      return;\n    }\n\n    const knex = await this.databaseFactory();\n    await TaskWorker.trigger(knex, id);\n  }\n\n  async scheduleTask(\n    task: SchedulerServiceTaskScheduleDefinition &\n      SchedulerServiceTaskInvocationDefinition,\n  ): Promise<void> {\n    validateId(task.id);\n    const scope = task.scope ?? 'global';\n\n    const settings: TaskSettingsV2 = {\n      version: 2,\n      cadence: parseDuration(task.frequency),\n      initialDelayDuration:\n        task.initialDelay && parseDuration(task.initialDelay),\n      timeoutAfterDuration: parseDuration(task.timeout),\n    };\n\n    // Delegated abort controller that will abort either when the provided\n    // controller aborts, or when a root lifecycle shutdown happens\n    const abortController = delegateAbortController(task.signal);\n    this.shutdownInitiated.then(() => abortController.abort());\n\n    if (scope === 'global') {\n      const knex = await this.databaseFactory();\n      const worker = new TaskWorker(\n        task.id,\n        this.instrumentedFunction(task, scope),\n        knex,\n        this.logger.child({ task: task.id }),\n      );\n      await worker.start(settings, { signal: abortController.signal });\n    } else {\n      const worker = new LocalTaskWorker(\n        task.id,\n        this.instrumentedFunction(task, scope),\n        this.logger.child({ task: task.id }),\n      );\n      worker.start(settings, { signal: abortController.signal });\n      this.localTasksById.set(task.id, worker);\n    }\n\n    this.allScheduledTasks.push({\n      id: task.id,\n      scope: scope,\n      settings: settings,\n    });\n  }\n\n  createScheduledTaskRunner(\n    schedule: SchedulerServiceTaskScheduleDefinition,\n  ): SchedulerServiceTaskRunner {\n    return {\n      run: async task => {\n        await this.scheduleTask({ ...task, ...schedule });\n      },\n    };\n  }\n\n  async getScheduledTasks(): Promise<SchedulerServiceTaskDescriptor[]> {\n    return this.allScheduledTasks;\n  }\n\n  private instrumentedFunction(\n    task: SchedulerServiceTaskInvocationDefinition,\n    scope: string,\n  ): SchedulerServiceTaskFunction {\n    return async abort => {\n      const labels: Record<string, string> = {\n        taskId: task.id,\n        scope,\n      };\n      this.counter.add(1, { ...labels, result: 'started' });\n\n      const startTime = process.hrtime();\n\n      try {\n        await tracer.startActiveSpan(`task ${task.id}`, async span => {\n          try {\n            span.setAttributes(labels);\n            await task.fn(abort);\n          } catch (error) {\n            if (error instanceof Error) {\n              span.recordException(error);\n            }\n            throw error;\n          } finally {\n            span.end();\n          }\n        });\n        labels.result = 'completed';\n      } catch (ex) {\n        labels.result = 'failed';\n        throw ex;\n      } finally {\n        const delta = process.hrtime(startTime);\n        const endTime = delta[0] + delta[1] / 1e9;\n        this.counter.add(1, labels);\n        this.duration.record(endTime, labels);\n      }\n    };\n  }\n}\n\nexport function parseDuration(\n  frequency: SchedulerServiceTaskScheduleDefinition['frequency'],\n): string {\n  if (typeof frequency === 'object' && 'cron' in frequency) {\n    return frequency.cron;\n  }\n  if (typeof frequency === 'object' && 'trigger' in frequency) {\n    return frequency.trigger;\n  }\n\n  const parsed = Duration.isDuration(frequency)\n    ? frequency\n    : Duration.fromObject(frequency);\n\n  if (!parsed.isValid) {\n    throw new Error(\n      `Invalid duration, ${parsed.invalidReason}: ${parsed.invalidExplanation}`,\n    );\n  }\n\n  return parsed.toISO()!;\n}\n"],"names":["trace","TRACER_ID","metrics","TaskWorker","validateId","delegateAbortController","LocalTaskWorker","Duration"],"mappings":";;;;;;;;AAkCA,MAAM,MAAA,GAASA,SAAM,CAAA,SAAA,CAAUC,cAAS,CAAA,CAAA;AAKjC,MAAM,uBAAoD,CAAA;AAAA,EAQ/D,WAAA,CACmB,eACA,EAAA,MAAA,EACjB,aACA,EAAA;AAHiB,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA,CAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAGjB,IAAM,MAAA,KAAA,GAAQC,WAAQ,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA;AACxC,IAAK,IAAA,CAAA,OAAA,GAAU,KAAM,CAAA,aAAA,CAAc,+BAAiC,EAAA;AAAA,MAClE,WAAa,EAAA,2CAAA;AAAA,KACd,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,QAAA,GAAW,KAAM,CAAA,eAAA,CAAgB,kCAAoC,EAAA;AAAA,MACxE,WAAa,EAAA,iCAAA;AAAA,MACb,IAAM,EAAA,SAAA;AAAA,KACP,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,iBAAA,GAAoB,IAAI,OAAA,CAAQ,CAAqB,iBAAA,KAAA;AACxD,MAAA,aAAA,EAAe,eAAgB,CAAA,MAAM,iBAAkB,CAAA,IAAI,CAAC,CAAA,CAAA;AAAA,KAC7D,CAAA,CAAA;AAAA,GACH;AAAA,EAvBiB,cAAA,uBAAqB,GAA6B,EAAA,CAAA;AAAA,EAClD,oBAAsD,EAAC,CAAA;AAAA,EACvD,iBAAA,CAAA;AAAA,EAEA,OAAA,CAAA;AAAA,EACA,QAAA,CAAA;AAAA,EAoBjB,MAAM,YAAY,EAA2B,EAAA;AAC3C,IAAA,MAAM,SAAY,GAAA,IAAA,CAAK,cAAe,CAAA,GAAA,CAAI,EAAE,CAAA,CAAA;AAC5C,IAAA,IAAI,SAAW,EAAA;AACb,MAAA,SAAA,CAAU,OAAQ,EAAA,CAAA;AAClB,MAAA,OAAA;AAAA,KACF;AAEA,IAAM,MAAA,IAAA,GAAO,MAAM,IAAA,CAAK,eAAgB,EAAA,CAAA;AACxC,IAAM,MAAAC,qBAAA,CAAW,OAAQ,CAAA,IAAA,EAAM,EAAE,CAAA,CAAA;AAAA,GACnC;AAAA,EAEA,MAAM,aACJ,IAEe,EAAA;AACf,IAAAC,eAAA,CAAW,KAAK,EAAE,CAAA,CAAA;AAClB,IAAM,MAAA,KAAA,GAAQ,KAAK,KAAS,IAAA,QAAA,CAAA;AAE5B,IAAA,MAAM,QAA2B,GAAA;AAAA,MAC/B,OAAS,EAAA,CAAA;AAAA,MACT,OAAA,EAAS,aAAc,CAAA,IAAA,CAAK,SAAS,CAAA;AAAA,MACrC,oBACE,EAAA,IAAA,CAAK,YAAgB,IAAA,aAAA,CAAc,KAAK,YAAY,CAAA;AAAA,MACtD,oBAAA,EAAsB,aAAc,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA,KAClD,CAAA;AAIA,IAAM,MAAA,eAAA,GAAkBC,4BAAwB,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC3D,IAAA,IAAA,CAAK,iBAAkB,CAAA,IAAA,CAAK,MAAM,eAAA,CAAgB,OAAO,CAAA,CAAA;AAEzD,IAAA,IAAI,UAAU,QAAU,EAAA;AACtB,MAAM,MAAA,IAAA,GAAO,MAAM,IAAA,CAAK,eAAgB,EAAA,CAAA;AACxC,MAAA,MAAM,SAAS,IAAIF,qBAAA;AAAA,QACjB,IAAK,CAAA,EAAA;AAAA,QACL,IAAA,CAAK,oBAAqB,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA,QACrC,IAAA;AAAA,QACA,KAAK,MAAO,CAAA,KAAA,CAAM,EAAE,IAAM,EAAA,IAAA,CAAK,IAAI,CAAA;AAAA,OACrC,CAAA;AACA,MAAA,MAAM,OAAO,KAAM,CAAA,QAAA,EAAU,EAAE,MAAQ,EAAA,eAAA,CAAgB,QAAQ,CAAA,CAAA;AAAA,KAC1D,MAAA;AACL,MAAA,MAAM,SAAS,IAAIG,+BAAA;AAAA,QACjB,IAAK,CAAA,EAAA;AAAA,QACL,IAAA,CAAK,oBAAqB,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA,QACrC,KAAK,MAAO,CAAA,KAAA,CAAM,EAAE,IAAM,EAAA,IAAA,CAAK,IAAI,CAAA;AAAA,OACrC,CAAA;AACA,MAAA,MAAA,CAAO,MAAM,QAAU,EAAA,EAAE,MAAQ,EAAA,eAAA,CAAgB,QAAQ,CAAA,CAAA;AACzD,MAAA,IAAA,CAAK,cAAe,CAAA,GAAA,CAAI,IAAK,CAAA,EAAA,EAAI,MAAM,CAAA,CAAA;AAAA,KACzC;AAEA,IAAA,IAAA,CAAK,kBAAkB,IAAK,CAAA;AAAA,MAC1B,IAAI,IAAK,CAAA,EAAA;AAAA,MACT,KAAA;AAAA,MACA,QAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,0BACE,QAC4B,EAAA;AAC5B,IAAO,OAAA;AAAA,MACL,GAAA,EAAK,OAAM,IAAQ,KAAA;AACjB,QAAA,MAAM,KAAK,YAAa,CAAA,EAAE,GAAG,IAAM,EAAA,GAAG,UAAU,CAAA,CAAA;AAAA,OAClD;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,iBAA+D,GAAA;AACnE,IAAA,OAAO,IAAK,CAAA,iBAAA,CAAA;AAAA,GACd;AAAA,EAEQ,oBAAA,CACN,MACA,KAC8B,EAAA;AAC9B,IAAA,OAAO,OAAM,KAAS,KAAA;AACpB,MAAA,MAAM,MAAiC,GAAA;AAAA,QACrC,QAAQ,IAAK,CAAA,EAAA;AAAA,QACb,KAAA;AAAA,OACF,CAAA;AACA,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,CAAG,EAAA,EAAE,GAAG,MAAQ,EAAA,MAAA,EAAQ,WAAW,CAAA,CAAA;AAEpD,MAAM,MAAA,SAAA,GAAY,QAAQ,MAAO,EAAA,CAAA;AAEjC,MAAI,IAAA;AACF,QAAA,MAAM,OAAO,eAAgB,CAAA,CAAA,KAAA,EAAQ,KAAK,EAAE,CAAA,CAAA,EAAI,OAAM,IAAQ,KAAA;AAC5D,UAAI,IAAA;AACF,YAAA,IAAA,CAAK,cAAc,MAAM,CAAA,CAAA;AACzB,YAAM,MAAA,IAAA,CAAK,GAAG,KAAK,CAAA,CAAA;AAAA,mBACZ,KAAO,EAAA;AACd,YAAA,IAAI,iBAAiB,KAAO,EAAA;AAC1B,cAAA,IAAA,CAAK,gBAAgB,KAAK,CAAA,CAAA;AAAA,aAC5B;AACA,YAAM,MAAA,KAAA,CAAA;AAAA,WACN,SAAA;AACA,YAAA,IAAA,CAAK,GAAI,EAAA,CAAA;AAAA,WACX;AAAA,SACD,CAAA,CAAA;AACD,QAAA,MAAA,CAAO,MAAS,GAAA,WAAA,CAAA;AAAA,eACT,EAAI,EAAA;AACX,QAAA,MAAA,CAAO,MAAS,GAAA,QAAA,CAAA;AAChB,QAAM,MAAA,EAAA,CAAA;AAAA,OACN,SAAA;AACA,QAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AACtC,QAAA,MAAM,UAAU,KAAM,CAAA,CAAC,CAAI,GAAA,KAAA,CAAM,CAAC,CAAI,GAAA,GAAA,CAAA;AACtC,QAAK,IAAA,CAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,EAAG,MAAM,CAAA,CAAA;AAC1B,QAAK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,OAAA,EAAS,MAAM,CAAA,CAAA;AAAA,OACtC;AAAA,KACF,CAAA;AAAA,GACF;AACF,CAAA;AAEO,SAAS,cACd,SACQ,EAAA;AACR,EAAA,IAAI,OAAO,SAAA,KAAc,QAAY,IAAA,MAAA,IAAU,SAAW,EAAA;AACxD,IAAA,OAAO,SAAU,CAAA,IAAA,CAAA;AAAA,GACnB;AACA,EAAA,IAAI,OAAO,SAAA,KAAc,QAAY,IAAA,SAAA,IAAa,SAAW,EAAA;AAC3D,IAAA,OAAO,SAAU,CAAA,OAAA,CAAA;AAAA,GACnB;AAEA,EAAM,MAAA,MAAA,GAASC,eAAS,UAAW,CAAA,SAAS,IACxC,SACA,GAAAA,cAAA,CAAS,WAAW,SAAS,CAAA,CAAA;AAEjC,EAAI,IAAA,CAAC,OAAO,OAAS,EAAA;AACnB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAqB,kBAAA,EAAA,MAAA,CAAO,aAAa,CAAA,EAAA,EAAK,OAAO,kBAAkB,CAAA,CAAA;AAAA,KACzE,CAAA;AAAA,GACF;AAEA,EAAA,OAAO,OAAO,KAAM,EAAA,CAAA;AACtB;;;;;"}