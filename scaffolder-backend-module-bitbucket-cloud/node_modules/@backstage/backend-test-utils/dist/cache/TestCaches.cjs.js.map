{"version":3,"file":"TestCaches.cjs.js","sources":["../../src/cache/TestCaches.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Keyv from 'keyv';\nimport { isDockerDisabledForTests } from '../util/isDockerDisabledForTests';\nimport { connectToExternalMemcache, startMemcachedContainer } from './memcache';\nimport { connectToExternalRedis, startRedisContainer } from './redis';\nimport { Instance, TestCacheId, TestCacheProperties, allCaches } from './types';\n\n/**\n * Encapsulates the creation of ephemeral test cache instances for use inside\n * unit or integration tests.\n *\n * @public\n */\nexport class TestCaches {\n  private readonly instanceById: Map<string, Instance>;\n  private readonly supportedIds: TestCacheId[];\n  private static defaultIds?: TestCacheId[];\n\n  /**\n   * Creates an empty `TestCaches` instance, and sets up Jest to clean up all of\n   * its acquired resources after all tests finish.\n   *\n   * You typically want to create just a single instance like this at the top of\n   * your test file or `describe` block, and then call `init` many times on that\n   * instance inside the individual tests. Spinning up a \"physical\" cache\n   * instance takes a considerable amount of time, slowing down tests. But\n   * wiping the contents of an instance using `init` is very fast.\n   */\n  static create(options?: {\n    ids?: TestCacheId[];\n    disableDocker?: boolean;\n  }): TestCaches {\n    const ids = options?.ids;\n    const disableDocker = options?.disableDocker ?? isDockerDisabledForTests();\n\n    let testCacheIds: TestCacheId[];\n    if (ids) {\n      testCacheIds = ids;\n    } else if (TestCaches.defaultIds) {\n      testCacheIds = TestCaches.defaultIds;\n    } else {\n      testCacheIds = Object.keys(allCaches) as TestCacheId[];\n    }\n\n    const supportedIds = testCacheIds.filter(id => {\n      const properties = allCaches[id];\n      if (!properties) {\n        return false;\n      }\n      // If the caller has set up the env with an explicit connection string,\n      // we'll assume that this target will work\n      if (\n        properties.connectionStringEnvironmentVariableName &&\n        process.env[properties.connectionStringEnvironmentVariableName]\n      ) {\n        return true;\n      }\n      // If the cache doesn't require docker at all, there's nothing to worry\n      // about\n      if (!properties.dockerImageName) {\n        return true;\n      }\n      // If the cache requires docker, but docker is disabled, we will fail.\n      if (disableDocker) {\n        return false;\n      }\n      return true;\n    });\n\n    const caches = new TestCaches(supportedIds);\n\n    if (supportedIds.length > 0) {\n      afterAll(async () => {\n        await caches.shutdown();\n      });\n    }\n\n    return caches;\n  }\n\n  static setDefaults(options: { ids?: TestCacheId[] }) {\n    TestCaches.defaultIds = options.ids;\n  }\n\n  private constructor(supportedIds: TestCacheId[]) {\n    this.instanceById = new Map();\n    this.supportedIds = supportedIds;\n  }\n\n  supports(id: TestCacheId): boolean {\n    return this.supportedIds.includes(id);\n  }\n\n  eachSupportedId(): [TestCacheId][] {\n    return this.supportedIds.map(id => [id]);\n  }\n\n  /**\n   * Returns a fresh, empty cache for the given driver.\n   *\n   * @param id - The ID of the cache to use, e.g. 'REDIS_7'\n   * @returns Cache connection properties\n   */\n  async init(\n    id: TestCacheId,\n  ): Promise<{ store: string; connection: string; keyv: Keyv }> {\n    const properties = allCaches[id];\n    if (!properties) {\n      const candidates = Object.keys(allCaches).join(', ');\n      throw new Error(\n        `Unknown test cache ${id}, possible values are ${candidates}`,\n      );\n    }\n    if (!this.supportedIds.includes(id)) {\n      const candidates = this.supportedIds.join(', ');\n      throw new Error(\n        `Unsupported test cache ${id} for this environment, possible values are ${candidates}`,\n      );\n    }\n\n    // Ensure that a testcontainers instance is up for this ID\n    let instance: Instance | undefined = this.instanceById.get(id);\n    if (!instance) {\n      instance = await this.initAny(properties);\n      this.instanceById.set(id, instance);\n    }\n\n    // Ensure that it's cleared of data from previous tests\n    await instance.keyv.clear();\n\n    return {\n      store: instance.store,\n      connection: instance.connection,\n      keyv: instance.keyv,\n    };\n  }\n\n  private async initAny(properties: TestCacheProperties): Promise<Instance> {\n    switch (properties.store) {\n      case 'memcache':\n        return this.initMemcached(properties);\n      case 'redis':\n        return this.initRedis(properties);\n      case 'memory':\n        return {\n          store: 'memory',\n          connection: 'memory',\n          keyv: new Keyv(),\n          stop: async () => {},\n        };\n      default:\n        throw new Error(`Unknown cache store '${properties.store}'`);\n    }\n  }\n\n  private async initMemcached(\n    properties: TestCacheProperties,\n  ): Promise<Instance> {\n    // Use the connection string if provided\n    const envVarName = properties.connectionStringEnvironmentVariableName;\n    if (envVarName) {\n      const connectionString = process.env[envVarName];\n      if (connectionString) {\n        return connectToExternalMemcache(connectionString);\n      }\n    }\n\n    return await startMemcachedContainer(properties.dockerImageName!);\n  }\n\n  private async initRedis(properties: TestCacheProperties): Promise<Instance> {\n    // Use the connection string if provided\n    const envVarName = properties.connectionStringEnvironmentVariableName;\n    if (envVarName) {\n      const connectionString = process.env[envVarName];\n      if (connectionString) {\n        return connectToExternalRedis(connectionString);\n      }\n    }\n\n    return await startRedisContainer(properties.dockerImageName!);\n  }\n\n  private async shutdown() {\n    const instances = [...this.instanceById.values()];\n    this.instanceById.clear();\n    await Promise.all(\n      instances.map(({ stop }) =>\n        stop().catch(error => {\n          console.warn(`TestCaches: Failed to stop container`, { error });\n        }),\n      ),\n    );\n  }\n}\n"],"names":["isDockerDisabledForTests","allCaches","Keyv","connectToExternalMemcache","startMemcachedContainer","connectToExternalRedis","startRedisContainer"],"mappings":"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"}