{"version":3,"file":"memcache.cjs.js","sources":["../../src/cache/memcache.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Keyv from 'keyv';\nimport KeyvMemcache from '@keyv/memcache';\nimport { v4 as uuid } from 'uuid';\nimport { Instance } from './types';\n\nasync function attemptMemcachedConnection(connection: string): Promise<Keyv> {\n  const startTime = Date.now();\n\n  for (;;) {\n    try {\n      const store = new KeyvMemcache(connection);\n      const keyv = new Keyv({ store });\n      const value = uuid();\n      await keyv.set('test', value);\n      if ((await keyv.get('test')) === value) {\n        return keyv;\n      }\n    } catch (e) {\n      if (Date.now() - startTime > 30_000) {\n        throw new Error(\n          `Timed out waiting for memcached to be ready for connections, ${e}`,\n        );\n      }\n    }\n\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n}\n\nexport async function connectToExternalMemcache(\n  connection: string,\n): Promise<Instance> {\n  const keyv = await attemptMemcachedConnection(connection);\n  return {\n    store: 'memcache',\n    connection,\n    keyv,\n    stop: async () => await keyv.disconnect(),\n  };\n}\n\nexport async function startMemcachedContainer(\n  image: string,\n): Promise<Instance> {\n  // Lazy-load to avoid side-effect of importing testcontainers\n  const { GenericContainer } = await import('testcontainers');\n\n  const container = await new GenericContainer(image)\n    .withExposedPorts(11211)\n    .start();\n\n  const host = container.getHost();\n  const port = container.getMappedPort(11211);\n  const connection = `${host}:${port}`;\n\n  const keyv = await attemptMemcachedConnection(connection);\n\n  return {\n    store: 'memcache',\n    connection,\n    keyv,\n    stop: async () => {\n      await keyv.disconnect();\n      await container.stop({ timeout: 10_000 });\n    },\n  };\n}\n"],"names":["KeyvMemcache","Keyv","uuid"],"mappings":";;;;;;;;;;;AAqBA,eAAe,2BAA2B,UAAmC,EAAA;AAC3E,EAAM,MAAA,SAAA,GAAY,KAAK,GAAI,EAAA,CAAA;AAE3B,EAAS,WAAA;AACP,IAAI,IAAA;AACF,MAAM,MAAA,KAAA,GAAQ,IAAIA,6BAAA,CAAa,UAAU,CAAA,CAAA;AACzC,MAAA,MAAM,IAAO,GAAA,IAAIC,qBAAK,CAAA,EAAE,OAAO,CAAA,CAAA;AAC/B,MAAA,MAAM,QAAQC,OAAK,EAAA,CAAA;AACnB,MAAM,MAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAC5B,MAAA,IAAK,MAAM,IAAA,CAAK,GAAI,CAAA,MAAM,MAAO,KAAO,EAAA;AACtC,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,aACO,CAAG,EAAA;AACV,MAAA,IAAI,IAAK,CAAA,GAAA,EAAQ,GAAA,SAAA,GAAY,GAAQ,EAAA;AACnC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,gEAAgE,CAAC,CAAA,CAAA;AAAA,SACnE,CAAA;AAAA,OACF;AAAA,KACF;AAEA,IAAA,MAAM,IAAI,OAAQ,CAAA,CAAA,OAAA,KAAW,UAAW,CAAA,OAAA,EAAS,GAAG,CAAC,CAAA,CAAA;AAAA,GACvD;AACF,CAAA;AAEA,eAAsB,0BACpB,UACmB,EAAA;AACnB,EAAM,MAAA,IAAA,GAAO,MAAM,0BAAA,CAA2B,UAAU,CAAA,CAAA;AACxD,EAAO,OAAA;AAAA,IACL,KAAO,EAAA,UAAA;AAAA,IACP,UAAA;AAAA,IACA,IAAA;AAAA,IACA,IAAM,EAAA,YAAY,MAAM,IAAA,CAAK,UAAW,EAAA;AAAA,GAC1C,CAAA;AACF,CAAA;AAEA,eAAsB,wBACpB,KACmB,EAAA;AAEnB,EAAA,MAAM,EAAE,gBAAA,EAAqB,GAAA,MAAM,OAAO,gBAAgB,CAAA,CAAA;AAE1D,EAAM,MAAA,SAAA,GAAY,MAAM,IAAI,gBAAA,CAAiB,KAAK,CAC/C,CAAA,gBAAA,CAAiB,KAAK,CAAA,CACtB,KAAM,EAAA,CAAA;AAET,EAAM,MAAA,IAAA,GAAO,UAAU,OAAQ,EAAA,CAAA;AAC/B,EAAM,MAAA,IAAA,GAAO,SAAU,CAAA,aAAA,CAAc,KAAK,CAAA,CAAA;AAC1C,EAAA,MAAM,UAAa,GAAA,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA,CAAA;AAElC,EAAM,MAAA,IAAA,GAAO,MAAM,0BAAA,CAA2B,UAAU,CAAA,CAAA;AAExD,EAAO,OAAA;AAAA,IACL,KAAO,EAAA,UAAA;AAAA,IACP,UAAA;AAAA,IACA,IAAA;AAAA,IACA,MAAM,YAAY;AAChB,MAAA,MAAM,KAAK,UAAW,EAAA,CAAA;AACtB,MAAA,MAAM,SAAU,CAAA,IAAA,CAAK,EAAE,OAAA,EAAS,KAAQ,CAAA,CAAA;AAAA,KAC1C;AAAA,GACF,CAAA;AACF;;;;;"}