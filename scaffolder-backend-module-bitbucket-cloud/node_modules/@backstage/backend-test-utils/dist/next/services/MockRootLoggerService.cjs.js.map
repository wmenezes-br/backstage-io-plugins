{"version":3,"file":"MockRootLoggerService.cjs.js","sources":["../../../src/next/services/MockRootLoggerService.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport type { mockServices } from './mockServices';\n\nconst levels = {\n  none: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n  debug: 4,\n};\n\nexport class MockRootLoggerService implements RootLoggerService {\n  #level: number;\n  #meta: JsonObject;\n\n  static create(\n    options?: mockServices.rootLogger.Options,\n  ): MockRootLoggerService {\n    const level = options?.level ?? 'none';\n    if (!(level in levels)) {\n      throw new Error(`Invalid log level '${level}'`);\n    }\n    return new MockRootLoggerService(levels[level], {});\n  }\n\n  error(message: string, meta?: JsonObject | Error | undefined): void {\n    this.#log('error', message, meta);\n  }\n\n  warn(message: string, meta?: JsonObject | Error | undefined): void {\n    this.#log('warn', message, meta);\n  }\n\n  info(message: string, meta?: JsonObject | Error | undefined): void {\n    this.#log('info', message, meta);\n  }\n\n  debug(message: string, meta?: JsonObject | Error | undefined): void {\n    this.#log('debug', message, meta);\n  }\n\n  child(meta: JsonObject): LoggerService {\n    return new MockRootLoggerService(this.#level, { ...this.#meta, ...meta });\n  }\n\n  private constructor(level: number, meta: JsonObject) {\n    this.#level = level;\n    this.#meta = meta;\n  }\n\n  #log(\n    level: 'error' | 'warn' | 'info' | 'debug',\n    message: string,\n    meta?: JsonObject | Error | undefined,\n  ) {\n    const levelValue = levels[level] ?? 0;\n    if (levelValue <= this.#level) {\n      const labels = Object.entries(this.#meta)\n        .map(([key, value]) => `${key}=${value}`)\n        .join(',');\n      console[level](`${labels} ${message}`, meta);\n    }\n  }\n}\n"],"names":[],"mappings":";;AAuBA,MAAM,MAAS,GAAA;AAAA,EACb,IAAM,EAAA,CAAA;AAAA,EACN,KAAO,EAAA,CAAA;AAAA,EACP,IAAM,EAAA,CAAA;AAAA,EACN,IAAM,EAAA,CAAA;AAAA,EACN,KAAO,EAAA,CAAA;AACT,CAAA,CAAA;AAEO,MAAM,qBAAmD,CAAA;AAAA,EAC9D,MAAA,CAAA;AAAA,EACA,KAAA,CAAA;AAAA,EAEA,OAAO,OACL,OACuB,EAAA;AACvB,IAAM,MAAA,KAAA,GAAQ,SAAS,KAAS,IAAA,MAAA,CAAA;AAChC,IAAI,IAAA,EAAE,SAAS,MAAS,CAAA,EAAA;AACtB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAsB,mBAAA,EAAA,KAAK,CAAG,CAAA,CAAA,CAAA,CAAA;AAAA,KAChD;AACA,IAAA,OAAO,IAAI,qBAAsB,CAAA,MAAA,CAAO,KAAK,CAAA,EAAG,EAAE,CAAA,CAAA;AAAA,GACpD;AAAA,EAEA,KAAA,CAAM,SAAiB,IAA6C,EAAA;AAClE,IAAK,IAAA,CAAA,IAAA,CAAK,OAAS,EAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GAClC;AAAA,EAEA,IAAA,CAAK,SAAiB,IAA6C,EAAA;AACjE,IAAK,IAAA,CAAA,IAAA,CAAK,MAAQ,EAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GACjC;AAAA,EAEA,IAAA,CAAK,SAAiB,IAA6C,EAAA;AACjE,IAAK,IAAA,CAAA,IAAA,CAAK,MAAQ,EAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GACjC;AAAA,EAEA,KAAA,CAAM,SAAiB,IAA6C,EAAA;AAClE,IAAK,IAAA,CAAA,IAAA,CAAK,OAAS,EAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GAClC;AAAA,EAEA,MAAM,IAAiC,EAAA;AACrC,IAAO,OAAA,IAAI,qBAAsB,CAAA,IAAA,CAAK,MAAQ,EAAA,EAAE,GAAG,IAAK,CAAA,KAAA,EAAO,GAAG,IAAA,EAAM,CAAA,CAAA;AAAA,GAC1E;AAAA,EAEQ,WAAA,CAAY,OAAe,IAAkB,EAAA;AACnD,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AACd,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AAAA,GACf;AAAA,EAEA,IAAA,CACE,KACA,EAAA,OAAA,EACA,IACA,EAAA;AACA,IAAM,MAAA,UAAA,GAAa,MAAO,CAAA,KAAK,CAAK,IAAA,CAAA,CAAA;AACpC,IAAI,IAAA,UAAA,IAAc,KAAK,MAAQ,EAAA;AAC7B,MAAA,MAAM,SAAS,MAAO,CAAA,OAAA,CAAQ,KAAK,KAAK,CAAA,CACrC,IAAI,CAAC,CAAC,KAAK,KAAK,CAAA,KAAM,GAAG,GAAG,CAAA,CAAA,EAAI,KAAK,CAAE,CAAA,CAAA,CACvC,KAAK,GAAG,CAAA,CAAA;AACX,MAAA,OAAA,CAAQ,KAAK,CAAE,CAAA,CAAA,EAAG,MAAM,CAAI,CAAA,EAAA,OAAO,IAAI,IAAI,CAAA,CAAA;AAAA,KAC7C;AAAA,GACF;AACF;;;;"}