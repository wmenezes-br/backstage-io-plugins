{"version":3,"file":"mockCredentials.cjs.js","sources":["../../../src/next/services/mockCredentials.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackstageCredentials,\n  BackstageNonePrincipal,\n  BackstagePrincipalAccessRestrictions,\n  BackstageServicePrincipal,\n  BackstageUserPrincipal,\n} from '@backstage/backend-plugin-api';\n\nexport const DEFAULT_MOCK_USER_ENTITY_REF = 'user:default/mock';\nexport const DEFAULT_MOCK_SERVICE_SUBJECT = 'external:test-service';\n\nexport const MOCK_AUTH_COOKIE = 'backstage-auth';\n\nexport const MOCK_NONE_TOKEN = 'mock-none-token';\n\nexport const MOCK_USER_TOKEN = 'mock-user-token';\nexport const MOCK_USER_TOKEN_PREFIX = 'mock-user-token:';\nexport const MOCK_INVALID_USER_TOKEN = 'mock-invalid-user-token';\n\nexport const MOCK_USER_LIMITED_TOKEN_PREFIX = 'mock-limited-user-token:';\nexport const MOCK_INVALID_USER_LIMITED_TOKEN =\n  'mock-invalid-limited-user-token';\n\nexport const MOCK_SERVICE_TOKEN = 'mock-service-token';\nexport const MOCK_SERVICE_TOKEN_PREFIX = 'mock-service-token:';\nexport const MOCK_INVALID_SERVICE_TOKEN = 'mock-invalid-service-token';\n\nfunction validateUserEntityRef(ref: string) {\n  if (!ref.match(/^.+:.+\\/.+$/)) {\n    throw new TypeError(\n      `Invalid user entity reference '${ref}', expected <kind>:<namespace>/<name>`,\n    );\n  }\n}\n\n/**\n * The payload that can be encoded into a mock user token.\n * @internal\n */\nexport type UserTokenPayload = {\n  sub?: string;\n};\n\n/**\n * The payload that can be encoded into a mock service token.\n * @internal\n */\nexport type ServiceTokenPayload = {\n  sub?: string; // service subject\n  obo?: string; // user entity reference\n  target?: string; // target plugin id\n};\n\n/**\n * @public\n */\nexport namespace mockCredentials {\n  /**\n   * Creates a mocked credentials object for a unauthenticated principal.\n   */\n  export function none(): BackstageCredentials<BackstageNonePrincipal> {\n    return {\n      $$type: '@backstage/BackstageCredentials',\n      principal: { type: 'none' },\n    };\n  }\n\n  /**\n   * Utilities related to none credentials.\n   */\n  export namespace none {\n    /**\n     * Returns an authorization header that translates to unauthenticated\n     * credentials.\n     *\n     * This is useful when one wants to explicitly test unauthenticated requests\n     * while still using the default behavior of the mock HttpAuthService where\n     * it defaults to user credentials.\n     */\n    export function header(): string {\n      // NOTE: there is no .token() version of this because only the\n      //       HttpAuthService should know about and consume this token\n      return `Bearer ${MOCK_NONE_TOKEN}`;\n    }\n  }\n\n  /**\n   * Creates a mocked credentials object for a user principal.\n   *\n   * The default user entity reference is 'user:default/mock'.\n   */\n  export function user(\n    userEntityRef: string = DEFAULT_MOCK_USER_ENTITY_REF,\n  ): BackstageCredentials<BackstageUserPrincipal> {\n    validateUserEntityRef(userEntityRef);\n    return {\n      $$type: '@backstage/BackstageCredentials',\n      principal: { type: 'user', userEntityRef },\n    };\n  }\n\n  /**\n   * Utilities related to user credentials.\n   */\n  export namespace user {\n    /**\n     * Creates a mocked user token. If a payload is provided it will be encoded\n     * into the token and forwarded to the credentials object when authenticated\n     * by the mock auth service.\n     */\n    export function token(userEntityRef?: string): string {\n      if (userEntityRef) {\n        validateUserEntityRef(userEntityRef);\n        return `${MOCK_USER_TOKEN_PREFIX}${JSON.stringify({\n          sub: userEntityRef,\n        } satisfies UserTokenPayload)}`;\n      }\n      return MOCK_USER_TOKEN;\n    }\n\n    /**\n     * Returns an authorization header with a mocked user token. If a payload is\n     * provided it will be encoded into the token and forwarded to the\n     * credentials object when authenticated by the mock auth service.\n     */\n    export function header(userEntityRef?: string): string {\n      return `Bearer ${token(userEntityRef)}`;\n    }\n\n    export function invalidToken(): string {\n      return MOCK_INVALID_USER_TOKEN;\n    }\n\n    export function invalidHeader(): string {\n      return `Bearer ${invalidToken()}`;\n    }\n  }\n\n  /**\n   * Creates a mocked credentials object for a user principal with limited\n   * access.\n   *\n   * The default user entity reference is 'user:default/mock'.\n   */\n  export function limitedUser(\n    userEntityRef: string = DEFAULT_MOCK_USER_ENTITY_REF,\n  ): BackstageCredentials<BackstageUserPrincipal> {\n    return user(userEntityRef);\n  }\n\n  /**\n   * Utilities related to limited user credentials.\n   */\n  export namespace limitedUser {\n    /**\n     * Creates a mocked limited user token. If a payload is provided it will be\n     * encoded into the token and forwarded to the credentials object when\n     * authenticated by the mock auth service.\n     */\n    export function token(\n      userEntityRef: string = DEFAULT_MOCK_USER_ENTITY_REF,\n    ): string {\n      validateUserEntityRef(userEntityRef);\n      return `${MOCK_USER_LIMITED_TOKEN_PREFIX}${JSON.stringify({\n        sub: userEntityRef,\n      } satisfies UserTokenPayload)}`;\n    }\n\n    /**\n     * Returns an authorization header with a mocked limited user token. If a\n     * payload is provided it will be encoded into the token and forwarded to\n     * the credentials object when authenticated by the mock auth service.\n     */\n    export function cookie(userEntityRef?: string): string {\n      return `${MOCK_AUTH_COOKIE}=${token(userEntityRef)}`;\n    }\n\n    export function invalidToken(): string {\n      return MOCK_INVALID_USER_LIMITED_TOKEN;\n    }\n\n    export function invalidCookie(): string {\n      return `${MOCK_AUTH_COOKIE}=${invalidToken()}`;\n    }\n  }\n\n  /**\n   * Creates a mocked credentials object for a service principal.\n   *\n   * The default subject is 'external:test-service', and no access restrictions.\n   */\n  export function service(\n    subject: string = DEFAULT_MOCK_SERVICE_SUBJECT,\n    accessRestrictions?: BackstagePrincipalAccessRestrictions,\n  ): BackstageCredentials<BackstageServicePrincipal> {\n    return {\n      $$type: '@backstage/BackstageCredentials',\n      principal: {\n        type: 'service',\n        subject,\n        ...(accessRestrictions ? { accessRestrictions } : {}),\n      },\n    };\n  }\n\n  /**\n   * Utilities related to service credentials.\n   */\n  export namespace service {\n    /**\n     * Options for the creation of mock service tokens.\n     */\n    export type TokenOptions = {\n      onBehalfOf: BackstageCredentials;\n      targetPluginId: string;\n    };\n\n    /**\n     * Creates a mocked service token. The provided options will be encoded into\n     * the token and forwarded to the credentials object when authenticated by\n     * the mock auth service.\n     */\n    export function token(options?: TokenOptions): string {\n      if (options) {\n        const { targetPluginId, onBehalfOf } = options; // for fixed ordering\n\n        const oboPrincipal = onBehalfOf?.principal as\n          | BackstageServicePrincipal\n          | BackstageUserPrincipal\n          | BackstageNonePrincipal;\n        const obo =\n          oboPrincipal.type === 'user' ? oboPrincipal.userEntityRef : undefined;\n        const subject =\n          oboPrincipal.type === 'service' ? oboPrincipal.subject : undefined;\n\n        return `${MOCK_SERVICE_TOKEN_PREFIX}${JSON.stringify({\n          sub: subject,\n          obo,\n          target: targetPluginId,\n        } satisfies ServiceTokenPayload)}`;\n      }\n      return MOCK_SERVICE_TOKEN;\n    }\n\n    /**\n     * Returns an authorization header with a mocked service token. The provided\n     * options will be encoded into the token and forwarded to the credentials\n     * object when authenticated by the mock auth service.\n     */\n    export function header(options?: TokenOptions): string {\n      return `Bearer ${token(options)}`;\n    }\n\n    export function invalidToken(): string {\n      return MOCK_INVALID_SERVICE_TOKEN;\n    }\n\n    export function invalidHeader(): string {\n      return `Bearer ${invalidToken()}`;\n    }\n  }\n}\n"],"names":["mockCredentials","none","user","limitedUser","service"],"mappings":"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"}