{"version":3,"file":"TestDatabases.cjs.js","sources":["../../src/database/TestDatabases.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { isDockerDisabledForTests } from '../util/isDockerDisabledForTests';\nimport { MysqlEngine } from './mysql';\nimport { PostgresEngine } from './postgres';\nimport { SqliteEngine } from './sqlite';\nimport {\n  Engine,\n  TestDatabaseId,\n  TestDatabaseProperties,\n  allDatabases,\n} from './types';\n\n/**\n * Encapsulates the creation of ephemeral test database instances for use\n * inside unit or integration tests.\n *\n * @public\n */\nexport class TestDatabases {\n  private readonly engineFactoryByDriver: Record<\n    string,\n    (properties: TestDatabaseProperties) => Promise<Engine>\n  > = {\n    pg: PostgresEngine.create,\n    mysql: MysqlEngine.create,\n    mysql2: MysqlEngine.create,\n    'better-sqlite3': SqliteEngine.create,\n    sqlite3: SqliteEngine.create,\n  };\n  private readonly engineByTestDatabaseId: Map<string, Engine>;\n  private readonly supportedIds: TestDatabaseId[];\n  private static defaultIds?: TestDatabaseId[];\n\n  /**\n   * Creates an empty `TestDatabases` instance, and sets up Jest to clean up\n   * all of its acquired resources after all tests finish.\n   *\n   * You typically want to create just a single instance like this at the top\n   * of your test file or `describe` block, and then call `init` many times on\n   * that instance inside the individual tests. Spinning up a \"physical\"\n   * database instance takes a considerable amount of time, slowing down tests.\n   * But initializing a new logical database inside that instance using `init`\n   * is very fast.\n   */\n  static create(options?: {\n    ids?: TestDatabaseId[];\n    disableDocker?: boolean;\n  }): TestDatabases {\n    const ids = options?.ids;\n    const disableDocker = options?.disableDocker ?? isDockerDisabledForTests();\n\n    let testDatabaseIds: TestDatabaseId[];\n    if (ids) {\n      testDatabaseIds = ids;\n    } else if (TestDatabases.defaultIds) {\n      testDatabaseIds = TestDatabases.defaultIds;\n    } else {\n      testDatabaseIds = Object.keys(allDatabases) as TestDatabaseId[];\n    }\n\n    const supportedIds = testDatabaseIds.filter(id => {\n      const properties = allDatabases[id];\n      if (!properties) {\n        return false;\n      }\n      // If the caller has set up the env with an explicit connection string,\n      // we'll assume that this database will work\n      if (\n        properties.connectionStringEnvironmentVariableName &&\n        process.env[properties.connectionStringEnvironmentVariableName]\n      ) {\n        return true;\n      }\n      // If the database doesn't require docker at all, there's nothing to worry\n      // about\n      if (!properties.dockerImageName) {\n        return true;\n      }\n      // If the database requires docker, but docker is disabled, we will fail.\n      if (disableDocker) {\n        return false;\n      }\n      return true;\n    });\n\n    const databases = new TestDatabases(supportedIds);\n\n    if (supportedIds.length > 0) {\n      afterAll(async () => {\n        await databases.shutdown();\n      });\n    }\n\n    return databases;\n  }\n\n  static setDefaults(options: { ids?: TestDatabaseId[] }) {\n    TestDatabases.defaultIds = options.ids;\n  }\n\n  private constructor(supportedIds: TestDatabaseId[]) {\n    this.engineByTestDatabaseId = new Map();\n    this.supportedIds = supportedIds;\n  }\n\n  supports(id: TestDatabaseId): boolean {\n    return this.supportedIds.includes(id);\n  }\n\n  eachSupportedId(): [TestDatabaseId][] {\n    return this.supportedIds.map(id => [id]);\n  }\n\n  /**\n   * Returns a fresh, unique, empty logical database on an instance of the\n   * given database ID platform.\n   *\n   * @param id - The ID of the database platform to use, e.g. 'POSTGRES_13'\n   * @returns A `Knex` connection object\n   */\n  async init(id: TestDatabaseId): Promise<Knex> {\n    const properties = allDatabases[id];\n    if (!properties) {\n      const candidates = Object.keys(allDatabases).join(', ');\n      throw new Error(\n        `Unknown test database ${id}, possible values are ${candidates}`,\n      );\n    }\n    if (!this.supportedIds.includes(id)) {\n      const candidates = this.supportedIds.join(', ');\n      throw new Error(\n        `Unsupported test database ${id} for this environment, possible values are ${candidates}`,\n      );\n    }\n\n    let engine = this.engineByTestDatabaseId.get(id);\n    if (!engine) {\n      const factory = this.engineFactoryByDriver[properties.driver];\n      if (!factory) {\n        throw new Error(`Unknown database driver ${properties.driver}`);\n      }\n      engine = await factory(properties);\n      this.engineByTestDatabaseId.set(id, engine);\n    }\n\n    return await engine.createDatabaseInstance();\n  }\n\n  private async shutdown() {\n    const engines = [...this.engineByTestDatabaseId.values()];\n    this.engineByTestDatabaseId.clear();\n\n    for (const engine of engines) {\n      try {\n        await engine.shutdown();\n      } catch (error) {\n        console.warn(`TestDatabases: Failed to shutdown engine`, {\n          engine,\n          error,\n        });\n      }\n    }\n  }\n}\n"],"names":["PostgresEngine","MysqlEngine","SqliteEngine","isDockerDisabledForTests","allDatabases"],"mappings":"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"}