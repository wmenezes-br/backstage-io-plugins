'use strict';

const THOUSAND_DAYS_MS = 1e3 * 24 * 60 * 60 * 1e3;
const TEN_MINUTES_MS = 600 * 1e3;
const defaultCookieConfigurer = ({
  callbackUrl,
  providerId,
  appOrigin
}) => {
  const { hostname: domain, pathname, protocol } = new URL(callbackUrl);
  const secure = protocol === "https:";
  let sameSite = "lax";
  if (new URL(appOrigin).hostname !== domain && secure) {
    sameSite = "none";
  }
  const path = pathname.endsWith(`${providerId}/handler/frame`) ? pathname.slice(0, -"/handler/frame".length) : `${pathname}/${providerId}`;
  return { domain, path, secure, sameSite };
};
class OAuthCookieManager {
  constructor(options) {
    this.options = options;
    this.cookieConfigurer = options.cookieConfigurer ?? defaultCookieConfigurer;
    this.nonceCookie = `${options.providerId}-nonce`;
    this.refreshTokenCookie = `${options.providerId}-refresh-token`;
    this.grantedScopeCookie = `${options.providerId}-granted-scope`;
  }
  cookieConfigurer;
  nonceCookie;
  refreshTokenCookie;
  grantedScopeCookie;
  getConfig(origin, pathSuffix = "") {
    const cookieConfig = this.cookieConfigurer({
      providerId: this.options.providerId,
      baseUrl: this.options.baseUrl,
      callbackUrl: this.options.callbackUrl,
      appOrigin: origin ?? this.options.defaultAppOrigin
    });
    return {
      httpOnly: true,
      sameSite: "lax",
      ...cookieConfig,
      path: cookieConfig.path + pathSuffix
    };
  }
  setNonce(res, nonce, origin) {
    res.cookie(this.nonceCookie, nonce, {
      maxAge: TEN_MINUTES_MS,
      ...this.getConfig(origin, "/handler")
    });
  }
  setRefreshToken(res, refreshToken, origin) {
    res.cookie(this.refreshTokenCookie, refreshToken, {
      maxAge: THOUSAND_DAYS_MS,
      ...this.getConfig(origin)
    });
  }
  removeRefreshToken(res, origin) {
    res.cookie(this.refreshTokenCookie, "", {
      maxAge: 0,
      ...this.getConfig(origin)
    });
  }
  removeGrantedScopes(res, origin) {
    res.cookie(this.grantedScopeCookie, "", {
      maxAge: 0,
      ...this.getConfig(origin)
    });
  }
  setGrantedScopes(res, scope, origin) {
    res.cookie(this.grantedScopeCookie, scope, {
      maxAge: THOUSAND_DAYS_MS,
      ...this.getConfig(origin)
    });
  }
  getNonce(req) {
    return req.cookies[this.nonceCookie];
  }
  getRefreshToken(req) {
    return req.cookies[this.refreshTokenCookie];
  }
  getGrantedScopes(req) {
    return req.cookies[this.grantedScopeCookie];
  }
}

exports.OAuthCookieManager = OAuthCookieManager;
//# sourceMappingURL=OAuthCookieManager.cjs.js.map
