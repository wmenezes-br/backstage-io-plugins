'use strict';

var fs = require('fs-extra');
var paths = require('../../lib/paths.cjs.js');
var backend = require('../../lib/bundler/backend.cjs.js');
require('yn');
require('path');
require('webpack');
require('react-dev-utils/FileSizeReporter');
require('react-dev-utils/formatWebpackMessages');
require('chalk');
require('eslint-webpack-plugin');
require('fork-ts-checker-webpack-plugin');
require('html-webpack-plugin');
require('@module-federation/enhanced/webpack');
require('@backstage/cli-common');
require('react-dev-utils/ModuleScopePlugin');
require('run-script-webpack-plugin');
require('@pmmmwh/react-refresh-webpack-plugin');
require('@manypkg/get-packages');
require('webpack-node-externals');
require('../../lib/bundler/optimization.cjs.js');
require('lodash/pickBy');
require('../../lib/run.cjs.js');
require('mini-css-extract-plugin');
require('../../lib/version.cjs.js');
require('../../lib/bundler/packageDetection.cjs.js');
require('react-dev-utils/openBrowser');
require('webpack-dev-server');
require('@backstage/config-loader');
require('@backstage/config');
require('@backstage/cli-node');
var startBackendExperimental = require('../../lib/experimental/startBackendExperimental.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

async function startBackend(options) {
  if (!process.env.LEGACY_BACKEND_START) {
    const waitForExit = await startBackendExperimental.startBackendExperimental({
      entry: "src/index",
      checksEnabled: false,
      // not supported
      inspectEnabled: options.inspectEnabled,
      inspectBrkEnabled: options.inspectBrkEnabled,
      require: options.require
    });
    await waitForExit();
  } else {
    console.warn(
      "LEGACY_BACKEND_START is deprecated and will be removed in a future release"
    );
    const waitForExit = await cleanDistAndServeBackend({
      entry: "src/index",
      checksEnabled: options.checksEnabled,
      inspectEnabled: options.inspectEnabled,
      inspectBrkEnabled: options.inspectBrkEnabled,
      require: options.require
    });
    await waitForExit();
  }
}
async function startBackendPlugin(options) {
  if (!process.env.LEGACY_BACKEND_START) {
    const hasDevIndexEntry = await fs__default.default.pathExists(
      paths.paths.resolveTarget("dev", "index.ts")
    );
    if (!hasDevIndexEntry) {
      console.warn(
        `The 'dev' directory is missing. Please create a proper dev/index.ts in order to start the plugin.`
      );
      return;
    }
    const waitForExit = await startBackendExperimental.startBackendExperimental({
      entry: "dev/index",
      checksEnabled: false,
      // not supported
      inspectEnabled: options.inspectEnabled,
      inspectBrkEnabled: options.inspectBrkEnabled,
      require: options.require
    });
    await waitForExit();
  } else {
    const hasEntry = await fs__default.default.pathExists(paths.paths.resolveTarget("src", "run.ts"));
    if (!hasEntry) {
      console.warn(
        `src/run.ts is missing. Please create the file or run the command without LEGACY_BACKEND_START`
      );
      return;
    }
    console.warn(
      "LEGACY_BACKEND_START is deprecated and will be removed in a future release"
    );
    const waitForExit = await cleanDistAndServeBackend({
      entry: "src/run",
      checksEnabled: options.checksEnabled,
      inspectEnabled: options.inspectEnabled,
      inspectBrkEnabled: options.inspectBrkEnabled,
      require: options.require
    });
    await waitForExit();
  }
}
async function cleanDistAndServeBackend(options) {
  await fs__default.default.remove(paths.paths.resolveTarget("dist"));
  return backend.serveBackend(options);
}

exports.startBackend = startBackend;
exports.startBackendPlugin = startBackendPlugin;
//# sourceMappingURL=startBackend.cjs.js.map
