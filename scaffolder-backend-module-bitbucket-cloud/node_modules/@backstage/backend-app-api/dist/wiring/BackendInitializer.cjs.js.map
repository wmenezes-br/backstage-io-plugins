{"version":3,"file":"BackendInitializer.cjs.js","sources":["../../src/wiring/BackendInitializer.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackendFeature,\n  ExtensionPoint,\n  coreServices,\n  ServiceRef,\n  ServiceFactory,\n  LifecycleService,\n  RootLifecycleService,\n} from '@backstage/backend-plugin-api';\nimport { ServiceOrExtensionPoint } from './types';\n// Direct internal import to avoid duplication\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type {\n  InternalBackendFeature,\n  InternalBackendFeatureLoader,\n  InternalBackendRegistrations,\n} from '../../../backend-plugin-api/src/wiring/types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type { InternalServiceFactory } from '../../../backend-plugin-api/src/services/system/types';\nimport { ForwardedError, ConflictError } from '@backstage/errors';\nimport { featureDiscoveryServiceRef } from '@backstage/backend-plugin-api/alpha';\nimport { DependencyGraph } from '../lib/DependencyGraph';\nimport { ServiceRegistry } from './ServiceRegistry';\nimport { createInitializationLogger } from './createInitializationLogger';\nimport { unwrapFeature } from './helpers';\n\nexport interface BackendRegisterInit {\n  consumes: Set<ServiceOrExtensionPoint>;\n  provides: Set<ServiceOrExtensionPoint>;\n  init: {\n    deps: { [name: string]: ServiceOrExtensionPoint };\n    func: (deps: { [name: string]: unknown }) => Promise<void>;\n  };\n}\n\n/**\n * A registry of backend instances, used to manage process shutdown hooks across all instances.\n */\nconst instanceRegistry = new (class InstanceRegistry {\n  #registered = false;\n  #instances = new Set<BackendInitializer>();\n\n  register(instance: BackendInitializer) {\n    if (!this.#registered) {\n      this.#registered = true;\n\n      process.addListener('SIGTERM', this.#exitHandler);\n      process.addListener('SIGINT', this.#exitHandler);\n      process.addListener('beforeExit', this.#exitHandler);\n    }\n\n    this.#instances.add(instance);\n  }\n\n  unregister(instance: BackendInitializer) {\n    this.#instances.delete(instance);\n  }\n\n  #exitHandler = async () => {\n    try {\n      const results = await Promise.allSettled(\n        Array.from(this.#instances).map(b => b.stop()),\n      );\n      const errors = results.flatMap(r =>\n        r.status === 'rejected' ? [r.reason] : [],\n      );\n\n      if (errors.length > 0) {\n        for (const error of errors) {\n          console.error(error);\n        }\n        process.exit(1);\n      } else {\n        process.exit(0);\n      }\n    } catch (error) {\n      console.error(error);\n      process.exit(1);\n    }\n  };\n})();\n\nexport class BackendInitializer {\n  #startPromise?: Promise<void>;\n  #stopPromise?: Promise<void>;\n  #registrations = new Array<InternalBackendRegistrations>();\n  #extensionPoints = new Map<string, { impl: unknown; pluginId: string }>();\n  #serviceRegistry: ServiceRegistry;\n  #registeredFeatures = new Array<Promise<BackendFeature>>();\n  #registeredFeatureLoaders = new Array<InternalBackendFeatureLoader>();\n\n  constructor(defaultApiFactories: ServiceFactory[]) {\n    this.#serviceRegistry = ServiceRegistry.create([...defaultApiFactories]);\n  }\n\n  async #getInitDeps(\n    deps: { [name: string]: ServiceOrExtensionPoint },\n    pluginId: string,\n    moduleId?: string,\n  ) {\n    const result = new Map<string, unknown>();\n    const missingRefs = new Set<ServiceOrExtensionPoint>();\n\n    for (const [name, ref] of Object.entries(deps)) {\n      const ep = this.#extensionPoints.get(ref.id);\n      if (ep) {\n        if (ep.pluginId !== pluginId) {\n          throw new Error(\n            `Illegal dependency: Module '${moduleId}' for plugin '${pluginId}' attempted to depend on extension point '${ref.id}' for plugin '${ep.pluginId}'. Extension points can only be used within their plugin's scope.`,\n          );\n        }\n        result.set(name, ep.impl);\n      } else {\n        const impl = await this.#serviceRegistry.get(\n          ref as ServiceRef<unknown>,\n          pluginId,\n        );\n        if (impl) {\n          result.set(name, impl);\n        } else {\n          missingRefs.add(ref);\n        }\n      }\n    }\n\n    if (missingRefs.size > 0) {\n      const missing = Array.from(missingRefs).join(', ');\n      const target = moduleId\n        ? `module '${moduleId}' for plugin '${pluginId}'`\n        : `plugin '${pluginId}'`;\n      throw new Error(\n        `Service or extension point dependencies of ${target} are missing for the following ref(s): ${missing}`,\n      );\n    }\n\n    return Object.fromEntries(result);\n  }\n\n  add(feature: BackendFeature | Promise<BackendFeature>) {\n    if (this.#startPromise) {\n      throw new Error('feature can not be added after the backend has started');\n    }\n    this.#registeredFeatures.push(Promise.resolve(feature));\n  }\n\n  #addFeature(feature: BackendFeature) {\n    if (isServiceFactory(feature)) {\n      this.#serviceRegistry.add(feature);\n    } else if (isBackendFeatureLoader(feature)) {\n      this.#registeredFeatureLoaders.push(feature);\n    } else if (isBackendRegistrations(feature)) {\n      this.#registrations.push(feature);\n    } else {\n      throw new Error(\n        `Failed to add feature, invalid feature ${JSON.stringify(feature)}`,\n      );\n    }\n  }\n\n  async start(): Promise<void> {\n    if (this.#startPromise) {\n      throw new Error('Backend has already started');\n    }\n    if (this.#stopPromise) {\n      throw new Error('Backend has already stopped');\n    }\n\n    instanceRegistry.register(this);\n\n    this.#startPromise = this.#doStart();\n    await this.#startPromise;\n  }\n\n  async #doStart(): Promise<void> {\n    this.#serviceRegistry.checkForCircularDeps();\n\n    for (const feature of this.#registeredFeatures) {\n      this.#addFeature(await feature);\n    }\n\n    const featureDiscovery = await this.#serviceRegistry.get(\n      // TODO: Let's leave this in place and remove it once the deprecated service is removed. We can do that post-1.0 since it's alpha\n      featureDiscoveryServiceRef,\n      'root',\n    );\n\n    if (featureDiscovery) {\n      const { features } = await featureDiscovery.getBackendFeatures();\n      for (const feature of features) {\n        this.#addFeature(unwrapFeature(feature));\n      }\n      this.#serviceRegistry.checkForCircularDeps();\n    }\n\n    await this.#applyBackendFeatureLoaders(this.#registeredFeatureLoaders);\n\n    // Initialize all root scoped services\n    await this.#serviceRegistry.initializeEagerServicesWithScope('root');\n\n    const pluginInits = new Map<string, BackendRegisterInit>();\n    const moduleInits = new Map<string, Map<string, BackendRegisterInit>>();\n\n    // Enumerate all registrations\n    for (const feature of this.#registrations) {\n      for (const r of feature.getRegistrations()) {\n        const provides = new Set<ExtensionPoint<unknown>>();\n\n        if (r.type === 'plugin' || r.type === 'module') {\n          for (const [extRef, extImpl] of r.extensionPoints) {\n            if (this.#extensionPoints.has(extRef.id)) {\n              throw new Error(\n                `ExtensionPoint with ID '${extRef.id}' is already registered`,\n              );\n            }\n            this.#extensionPoints.set(extRef.id, {\n              impl: extImpl,\n              pluginId: r.pluginId,\n            });\n            provides.add(extRef);\n          }\n        }\n\n        if (r.type === 'plugin') {\n          if (pluginInits.has(r.pluginId)) {\n            throw new Error(`Plugin '${r.pluginId}' is already registered`);\n          }\n          pluginInits.set(r.pluginId, {\n            provides,\n            consumes: new Set(Object.values(r.init.deps)),\n            init: r.init,\n          });\n        } else if (r.type === 'module') {\n          let modules = moduleInits.get(r.pluginId);\n          if (!modules) {\n            modules = new Map();\n            moduleInits.set(r.pluginId, modules);\n          }\n          if (modules.has(r.moduleId)) {\n            throw new Error(\n              `Module '${r.moduleId}' for plugin '${r.pluginId}' is already registered`,\n            );\n          }\n          modules.set(r.moduleId, {\n            provides,\n            consumes: new Set(Object.values(r.init.deps)),\n            init: r.init,\n          });\n        } else {\n          throw new Error(`Invalid registration type '${(r as any).type}'`);\n        }\n      }\n    }\n\n    const allPluginIds = [...pluginInits.keys()];\n\n    const initLogger = createInitializationLogger(\n      allPluginIds,\n      await this.#serviceRegistry.get(coreServices.rootLogger, 'root'),\n    );\n\n    // All plugins are initialized in parallel\n    const results = await Promise.allSettled(\n      allPluginIds.map(async pluginId => {\n        try {\n          // Initialize all eager services\n          await this.#serviceRegistry.initializeEagerServicesWithScope(\n            'plugin',\n            pluginId,\n          );\n\n          // Modules are initialized before plugins, so that they can provide extension to the plugin\n          const modules = moduleInits.get(pluginId);\n          if (modules) {\n            const tree = DependencyGraph.fromIterable(\n              Array.from(modules).map(([moduleId, moduleInit]) => ({\n                value: { moduleId, moduleInit },\n                // Relationships are reversed at this point since we're only interested in the extension points.\n                // If a modules provides extension point A we want it to be initialized AFTER all modules\n                // that depend on extension point A, so that they can provide their extensions.\n                consumes: Array.from(moduleInit.provides).map(p => p.id),\n                provides: Array.from(moduleInit.consumes).map(c => c.id),\n              })),\n            );\n            const circular = tree.detectCircularDependency();\n            if (circular) {\n              throw new ConflictError(\n                `Circular dependency detected for modules of plugin '${pluginId}', ${circular\n                  .map(({ moduleId }) => `'${moduleId}'`)\n                  .join(' -> ')}`,\n              );\n            }\n            await tree.parallelTopologicalTraversal(\n              async ({ moduleId, moduleInit }) => {\n                const moduleDeps = await this.#getInitDeps(\n                  moduleInit.init.deps,\n                  pluginId,\n                  moduleId,\n                );\n                await moduleInit.init.func(moduleDeps).catch(error => {\n                  throw new ForwardedError(\n                    `Module '${moduleId}' for plugin '${pluginId}' startup failed`,\n                    error,\n                  );\n                });\n              },\n            );\n          }\n\n          // Once all modules have been initialized, we can initialize the plugin itself\n          const pluginInit = pluginInits.get(pluginId);\n          // We allow modules to be installed without the accompanying plugin, so the plugin may not exist\n          if (pluginInit) {\n            const pluginDeps = await this.#getInitDeps(\n              pluginInit.init.deps,\n              pluginId,\n            );\n            await pluginInit.init.func(pluginDeps).catch(error => {\n              throw new ForwardedError(\n                `Plugin '${pluginId}' startup failed`,\n                error,\n              );\n            });\n          }\n\n          initLogger.onPluginStarted(pluginId);\n\n          // Once the plugin and all modules have been initialized, we can signal that the plugin has stared up successfully\n          const lifecycleService = await this.#getPluginLifecycleImpl(pluginId);\n          await lifecycleService.startup();\n        } catch (error) {\n          initLogger.onPluginFailed(pluginId);\n          throw error;\n        }\n      }),\n    );\n\n    const initErrors = results.flatMap(r =>\n      r.status === 'rejected' ? [r.reason] : [],\n    );\n    if (initErrors.length === 1) {\n      throw initErrors[0];\n    } else if (initErrors.length > 1) {\n      // TODO(Rugvip): Seems like there aren't proper types for AggregateError yet\n      throw new (AggregateError as any)(initErrors, 'Backend startup failed');\n    }\n\n    // Once all plugins and modules have been initialized, we can signal that the backend has started up successfully\n    const lifecycleService = await this.#getRootLifecycleImpl();\n    await lifecycleService.startup();\n\n    initLogger.onAllStarted();\n\n    // Once the backend is started, any uncaught errors or unhandled rejections are caught\n    // and logged, in order to avoid crashing the entire backend on local failures.\n    if (process.env.NODE_ENV !== 'test') {\n      const rootLogger = await this.#serviceRegistry.get(\n        coreServices.rootLogger,\n        'root',\n      );\n      process.on('unhandledRejection', (reason: Error) => {\n        rootLogger\n          ?.child({ type: 'unhandledRejection' })\n          ?.error('Unhandled rejection', reason);\n      });\n      process.on('uncaughtException', error => {\n        rootLogger\n          ?.child({ type: 'uncaughtException' })\n          ?.error('Uncaught exception', error);\n      });\n    }\n  }\n\n  // It's fine to call .stop() multiple times, which for example can happen with manual stop + process exit\n  async stop(): Promise<void> {\n    instanceRegistry.unregister(this);\n\n    if (!this.#stopPromise) {\n      this.#stopPromise = this.#doStop();\n    }\n    await this.#stopPromise;\n  }\n\n  async #doStop(): Promise<void> {\n    if (!this.#startPromise) {\n      return;\n    }\n\n    try {\n      await this.#startPromise;\n    } catch (error) {\n      // The startup failed, but we may still want to do cleanup so we continue silently\n    }\n\n    // Get all plugins.\n    const allPlugins = new Set<string>();\n    for (const feature of this.#registrations) {\n      for (const r of feature.getRegistrations()) {\n        if (r.type === 'plugin') {\n          allPlugins.add(r.pluginId);\n        }\n      }\n    }\n\n    // Iterate through all plugins and run their shutdown hooks.\n    await Promise.allSettled(\n      [...allPlugins].map(async pluginId => {\n        const lifecycleService = await this.#getPluginLifecycleImpl(pluginId);\n        await lifecycleService.shutdown();\n      }),\n    );\n\n    // Once all plugin shutdown hooks are done, run root shutdown hooks.\n    const lifecycleService = await this.#getRootLifecycleImpl();\n    await lifecycleService.shutdown();\n  }\n\n  // Bit of a hacky way to grab the lifecycle services, potentially find a nicer way to do this\n  async #getRootLifecycleImpl(): Promise<\n    RootLifecycleService & {\n      startup(): Promise<void>;\n      shutdown(): Promise<void>;\n    }\n  > {\n    const lifecycleService = await this.#serviceRegistry.get(\n      coreServices.rootLifecycle,\n      'root',\n    );\n\n    const service = lifecycleService as any;\n    if (\n      service &&\n      typeof service.startup === 'function' &&\n      typeof service.shutdown === 'function'\n    ) {\n      return service;\n    }\n\n    throw new Error('Unexpected root lifecycle service implementation');\n  }\n\n  async #getPluginLifecycleImpl(\n    pluginId: string,\n  ): Promise<\n    LifecycleService & { startup(): Promise<void>; shutdown(): Promise<void> }\n  > {\n    const lifecycleService = await this.#serviceRegistry.get(\n      coreServices.lifecycle,\n      pluginId,\n    );\n\n    const service = lifecycleService as any;\n    if (\n      service &&\n      typeof service.startup === 'function' &&\n      typeof service.shutdown === 'function'\n    ) {\n      return service;\n    }\n\n    throw new Error('Unexpected plugin lifecycle service implementation');\n  }\n\n  async #applyBackendFeatureLoaders(loaders: InternalBackendFeatureLoader[]) {\n    for (const loader of loaders) {\n      const deps = new Map<string, unknown>();\n      const missingRefs = new Set<ServiceOrExtensionPoint>();\n\n      for (const [name, ref] of Object.entries(loader.deps ?? {})) {\n        if (ref.scope !== 'root') {\n          throw new Error(\n            `Feature loaders can only depend on root scoped services, but '${name}' is scoped to '${ref.scope}'. Offending loader is ${loader.description}`,\n          );\n        }\n        const impl = await this.#serviceRegistry.get(\n          ref as ServiceRef<unknown>,\n          'root',\n        );\n        if (impl) {\n          deps.set(name, impl);\n        } else {\n          missingRefs.add(ref);\n        }\n      }\n\n      if (missingRefs.size > 0) {\n        const missing = Array.from(missingRefs).join(', ');\n        throw new Error(\n          `No service available for the following ref(s): ${missing}, depended on by feature loader ${loader.description}`,\n        );\n      }\n\n      const result = await loader\n        .loader(Object.fromEntries(deps))\n        .then(features => features.map(unwrapFeature))\n        .catch(error => {\n          throw new ForwardedError(\n            `Feature loader ${loader.description} failed`,\n            error,\n          );\n        });\n\n      let didAddServiceFactory = false;\n      const newLoaders = new Array<InternalBackendFeatureLoader>();\n\n      for await (const feature of result) {\n        if (isBackendFeatureLoader(feature)) {\n          newLoaders.push(feature);\n        } else {\n          didAddServiceFactory ||= isServiceFactory(feature);\n          this.#addFeature(feature);\n        }\n      }\n\n      // Every time we add a new service factory we need to make sure that we don't have circular dependencies\n      if (didAddServiceFactory) {\n        this.#serviceRegistry.checkForCircularDeps();\n      }\n\n      // Apply loaders recursively, depth-first\n      if (newLoaders.length > 0) {\n        await this.#applyBackendFeatureLoaders(newLoaders);\n      }\n    }\n  }\n}\n\nfunction toInternalBackendFeature(\n  feature: BackendFeature,\n): InternalBackendFeature {\n  if (feature.$$type !== '@backstage/BackendFeature') {\n    throw new Error(`Invalid BackendFeature, bad type '${feature.$$type}'`);\n  }\n  const internal = feature as InternalBackendFeature;\n  if (internal.version !== 'v1') {\n    throw new Error(\n      `Invalid BackendFeature, bad version '${internal.version}'`,\n    );\n  }\n  return internal;\n}\n\nfunction isServiceFactory(\n  feature: BackendFeature,\n): feature is InternalServiceFactory {\n  const internal = toInternalBackendFeature(feature);\n  if (internal.featureType === 'service') {\n    return true;\n  }\n  // Backwards compatibility for v1 registrations that use duck typing\n  return 'service' in internal;\n}\n\nfunction isBackendRegistrations(\n  feature: BackendFeature,\n): feature is InternalBackendRegistrations {\n  const internal = toInternalBackendFeature(feature);\n  if (internal.featureType === 'registrations') {\n    return true;\n  }\n  // Backwards compatibility for v1 registrations that use duck typing\n  return 'getRegistrations' in internal;\n}\n\nfunction isBackendFeatureLoader(\n  feature: BackendFeature,\n): feature is InternalBackendFeatureLoader {\n  return toInternalBackendFeature(feature).featureType === 'loader';\n}\n"],"names":["ServiceRegistry","featureDiscoveryServiceRef","unwrapFeature","createInitializationLogger","coreServices","DependencyGraph","ConflictError","ForwardedError","lifecycleService"],"mappings":"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"}