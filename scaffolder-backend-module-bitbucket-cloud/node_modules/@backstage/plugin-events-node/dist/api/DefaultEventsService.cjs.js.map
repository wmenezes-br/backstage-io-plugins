{"version":3,"file":"DefaultEventsService.cjs.js","sources":["../../src/api/DefaultEventsService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  DiscoveryService,\n  LifecycleService,\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport { EventParams } from './EventParams';\nimport { EventsService, EventsServiceSubscribeOptions } from './EventsService';\nimport { DefaultApiClient } from '../generated';\nimport { ResponseError } from '@backstage/errors';\n\nconst POLL_BACKOFF_START_MS = 1_000;\nconst POLL_BACKOFF_MAX_MS = 60_000;\nconst POLL_BACKOFF_FACTOR = 2;\n\nconst EVENT_BUS_MODES = ['never', 'always', 'auto'] as const;\n\n/**\n * @public\n */\nexport type EventBusMode = 'never' | 'always' | 'auto';\n\n/**\n * Local event bus for subscribers within the same process.\n *\n * When publishing events we'll keep track of which subscribers we managed to\n * reach locally, and forward those subscriber IDs to the events backend if it\n * is in use. The events backend will then both avoid forwarding the same events\n * to those subscribers again, but also avoid storing the event altogether if\n * there are no other subscribers.\n * @internal\n */\nexport class LocalEventBus {\n  readonly #logger: LoggerService;\n\n  readonly #subscribers = new Map<\n    string,\n    Omit<EventsServiceSubscribeOptions, 'topics'>[]\n  >();\n\n  constructor(logger: LoggerService) {\n    this.#logger = logger;\n  }\n\n  async publish(\n    params: EventParams,\n  ): Promise<{ notifiedSubscribers: string[] }> {\n    this.#logger.debug(\n      `Event received: topic=${params.topic}, metadata=${JSON.stringify(\n        params.metadata,\n      )}, payload=${JSON.stringify(params.eventPayload)}`,\n    );\n\n    if (!this.#subscribers.has(params.topic)) {\n      return { notifiedSubscribers: [] };\n    }\n\n    const onEventPromises: Promise<string>[] = [];\n    this.#subscribers.get(params.topic)?.forEach(subscription => {\n      onEventPromises.push(\n        (async () => {\n          try {\n            await subscription.onEvent(params);\n          } catch (error) {\n            this.#logger.warn(\n              `Subscriber \"${subscription.id}\" failed to process event for topic \"${params.topic}\"`,\n              error,\n            );\n          }\n          return subscription.id;\n        })(),\n      );\n    });\n\n    return { notifiedSubscribers: await Promise.all(onEventPromises) };\n  }\n\n  async subscribe(options: EventsServiceSubscribeOptions): Promise<void> {\n    options.topics.forEach(topic => {\n      if (!this.#subscribers.has(topic)) {\n        this.#subscribers.set(topic, []);\n      }\n\n      this.#subscribers.get(topic)!.push({\n        id: options.id,\n        onEvent: options.onEvent,\n      });\n    });\n  }\n}\n\n/**\n * Plugin specific events bus that delegates to the local bus, as well as the\n * events backend if it is available.\n */\nclass PluginEventsService implements EventsService {\n  constructor(\n    private readonly pluginId: string,\n    private readonly localBus: LocalEventBus,\n    private readonly logger: LoggerService,\n    private readonly mode: EventBusMode,\n    private client?: DefaultApiClient,\n    private readonly auth?: AuthService,\n  ) {}\n\n  async publish(params: EventParams): Promise<void> {\n    const lock = this.#getShutdownLock();\n    if (!lock) {\n      throw new Error('Service is shutting down');\n    }\n    try {\n      const { notifiedSubscribers } = await this.localBus.publish(params);\n\n      const client = this.client;\n      if (!client) {\n        return;\n      }\n      const token = await this.#getToken();\n      if (!token) {\n        return;\n      }\n      const res = await client.postEvent(\n        {\n          body: {\n            event: { payload: params.eventPayload, topic: params.topic },\n            notifiedSubscribers,\n          },\n        },\n        { token },\n      );\n\n      if (!res.ok) {\n        if (res.status === 404 && this.mode !== 'always') {\n          this.logger.warn(\n            `Event publish request failed with status 404, events backend not found. Future events will not be persisted.`,\n          );\n          delete this.client;\n          return;\n        }\n        throw await ResponseError.fromResponse(res);\n      }\n    } finally {\n      lock.release();\n    }\n  }\n\n  async subscribe(options: EventsServiceSubscribeOptions): Promise<void> {\n    const subscriptionId = `${this.pluginId}.${options.id}`;\n\n    await this.localBus.subscribe({\n      id: subscriptionId,\n      topics: options.topics,\n      onEvent: options.onEvent,\n    });\n\n    if (!this.client) {\n      return;\n    }\n\n    this.#startPolling(subscriptionId, options.topics, options.onEvent);\n  }\n\n  #startPolling(\n    subscriptionId: string,\n    topics: string[],\n    onEvent: EventsServiceSubscribeOptions['onEvent'],\n  ) {\n    let hasSubscription = false;\n    let backoffMs = POLL_BACKOFF_START_MS;\n    const poll = async () => {\n      const client = this.client;\n      if (!client) {\n        return;\n      }\n      const lock = this.#getShutdownLock();\n      if (!lock) {\n        return; // shutting down\n      }\n      try {\n        const token = await this.#getToken();\n        if (!token) {\n          return;\n        }\n\n        if (hasSubscription) {\n          const res = await client.getSubscriptionEvents(\n            {\n              path: { subscriptionId },\n            },\n            { token },\n          );\n\n          if (!res.ok) {\n            if (res.status === 404) {\n              this.logger.info(\n                `Polling event subscription resulted in a 404, recreating subscription`,\n              );\n              hasSubscription = false;\n            } else {\n              throw await ResponseError.fromResponse(res);\n            }\n          }\n\n          // Successful response, reset backoff\n          backoffMs = POLL_BACKOFF_START_MS;\n\n          // 202 means there were no immediately available events, but the\n          // response will block until either new events are available or the\n          // request times out. In both cases we should should try to read events\n          // immediately again\n          if (res.status === 202) {\n            lock.release();\n            await res.body?.getReader()?.closed;\n            process.nextTick(poll);\n          } else if (res.status === 200) {\n            const data = await res.json();\n            if (data) {\n              for (const event of data.events ?? []) {\n                try {\n                  await onEvent({\n                    topic: event.topic,\n                    eventPayload: event.payload,\n                  });\n                } catch (error) {\n                  this.logger.warn(\n                    `Subscriber \"${subscriptionId}\" failed to process event for topic \"${event.topic}\"`,\n                    error,\n                  );\n                }\n              }\n            } else {\n              this.logger.warn(\n                `Unexpected response status ${res.status} from events backend for subscription \"${subscriptionId}\"`,\n              );\n            }\n          }\n        }\n\n        // If we haven't yet created the subscription, or if it was removed, create a new one\n        if (!hasSubscription) {\n          const res = await client.putSubscription(\n            {\n              path: { subscriptionId },\n              body: { topics },\n            },\n            { token },\n          );\n          hasSubscription = true;\n          if (!res.ok) {\n            if (res.status === 404 && this.mode !== 'always') {\n              this.logger.warn(\n                `Event subscribe request failed with status 404, events backend not found. Will only receive events that were sent locally on this process.`,\n              );\n              // Events backend is not present and not configured to always be used, bail out and stop polling\n              delete this.client;\n              return;\n            }\n            throw await ResponseError.fromResponse(res);\n          }\n        }\n\n        process.nextTick(poll);\n      } catch (error) {\n        this.logger.warn(\n          `Poll failed for subscription \"${subscriptionId}\", retrying in ${backoffMs.toFixed(\n            0,\n          )}ms`,\n          error,\n        );\n        setTimeout(poll, backoffMs);\n        backoffMs = Math.min(\n          backoffMs * POLL_BACKOFF_FACTOR,\n          POLL_BACKOFF_MAX_MS,\n        );\n      } finally {\n        lock.release();\n      }\n    };\n    poll();\n  }\n\n  async #getToken() {\n    if (!this.auth) {\n      throw new Error('Auth service not available');\n    }\n\n    try {\n      const { token } = await this.auth.getPluginRequestToken({\n        onBehalfOf: await this.auth.getOwnServiceCredentials(),\n        targetPluginId: 'events',\n      });\n      return token;\n    } catch (error) {\n      // This is a bit hacky, but handles the case where new auth is used\n      // without legacy auth fallback, and the events backend is not installed\n      if (\n        String(error).includes('Unable to generate legacy token') &&\n        this.mode !== 'always'\n      ) {\n        this.logger.warn(\n          `The events backend is not available and neither is legacy auth. Future events will not be persisted.`,\n        );\n        delete this.client;\n        return undefined;\n      }\n      throw error;\n    }\n  }\n\n  async shutdown() {\n    this.#isShuttingDown = true;\n    await Promise.all(this.#shutdownLocks);\n  }\n\n  #isShuttingDown = false;\n  #shutdownLocks = new Set<Promise<void>>();\n\n  // This locking mechanism helps ensure that we are either idle or waiting for\n  // a blocked events call before shutting down. It increases out changes of\n  // never dropping any events on shutdown.\n  #getShutdownLock(): { release(): void } | undefined {\n    if (this.#isShuttingDown) {\n      return undefined;\n    }\n\n    let release: () => void;\n\n    const lock = new Promise<void>(resolve => {\n      release = () => {\n        resolve();\n        this.#shutdownLocks.delete(lock);\n      };\n    });\n    this.#shutdownLocks.add(lock);\n    return { release: release! };\n  }\n}\n\n/**\n * In-process event broker which will pass the event to all registered subscribers\n * interested in it.\n * Events will not be persisted in any form.\n * Events will not be passed to subscribers at other instances of the same cluster.\n *\n * @public\n */\n// TODO(pjungermann): add opentelemetry? (see plugins/catalog-backend/src/util/opentelemetry.ts, etc.)\nexport class DefaultEventsService implements EventsService {\n  private constructor(\n    private readonly logger: LoggerService,\n    private readonly localBus: LocalEventBus,\n    private readonly mode: EventBusMode,\n  ) {}\n\n  static create(options: {\n    logger: LoggerService;\n    config?: RootConfigService;\n    useEventBus?: EventBusMode;\n  }): DefaultEventsService {\n    const eventBusMode =\n      options.useEventBus ??\n      ((options.config?.getOptionalString('events.useEventBus') ??\n        'auto') as EventBusMode);\n    if (!EVENT_BUS_MODES.includes(eventBusMode)) {\n      throw new Error(\n        `Invalid events.useEventBus config, must be one of ${EVENT_BUS_MODES.join(\n          ', ',\n        )}, got '${eventBusMode}'`,\n      );\n    }\n\n    return new DefaultEventsService(\n      options.logger,\n      new LocalEventBus(options.logger),\n      eventBusMode,\n    );\n  }\n\n  /**\n   * Returns a plugin-scoped context of the `EventService`\n   * that ensures to prefix subscriber IDs with the plugin ID.\n   *\n   * @param pluginId - The plugin that the `EventService` should be created for.\n   */\n  forPlugin(\n    pluginId: string,\n    options?: {\n      discovery: DiscoveryService;\n      logger: LoggerService;\n      auth: AuthService;\n      lifecycle: LifecycleService;\n    },\n  ): EventsService {\n    const client =\n      options && this.mode !== 'never'\n        ? new DefaultApiClient({\n            discoveryApi: options.discovery,\n            fetchApi: { fetch }, // use native node fetch\n          })\n        : undefined;\n    const logger = options?.logger ?? this.logger;\n    const service = new PluginEventsService(\n      pluginId,\n      this.localBus,\n      logger,\n      this.mode,\n      client,\n      options?.auth,\n    );\n    options?.lifecycle.addShutdownHook(async () => {\n      await service.shutdown();\n    });\n    return service;\n  }\n\n  async publish(params: EventParams): Promise<void> {\n    await this.localBus.publish(params);\n  }\n\n  async subscribe(options: EventsServiceSubscribeOptions): Promise<void> {\n    this.localBus.subscribe(options);\n  }\n}\n"],"names":["ResponseError","DefaultApiClient"],"mappings":"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"}