{"version":3,"file":"mockActionContext.cjs.js","sources":["../../src/actions/mockActionContext.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PassThrough } from 'stream';\nimport { loggerToWinstonLogger } from '@backstage/backend-common';\nimport {\n  createMockDirectory,\n  mockCredentials,\n  mockServices,\n} from '@backstage/backend-test-utils';\nimport { JsonObject } from '@backstage/types';\nimport { ActionContext } from '@backstage/plugin-scaffolder-node';\n\n/**\n * A utility method to create a mock action context for scaffolder actions.\n *\n * @public\n * @param options - optional parameters to override default mock context\n */\nexport const createMockActionContext = <\n  TActionInput extends JsonObject = JsonObject,\n  TActionOutput extends JsonObject = JsonObject,\n>(\n  options?: Partial<ActionContext<TActionInput, TActionOutput>>,\n): ActionContext<TActionInput, TActionOutput> => {\n  const credentials = mockCredentials.user();\n  const defaultContext = {\n    logger: loggerToWinstonLogger(mockServices.logger.mock()),\n    logStream: new PassThrough(),\n    output: jest.fn(),\n    createTemporaryDirectory: jest.fn(),\n    input: {} as TActionInput,\n    checkpoint: jest.fn(),\n    getInitiatorCredentials: () => Promise.resolve(credentials),\n  };\n\n  const createDefaultWorkspace = () => ({\n    workspacePath: createMockDirectory().resolve('workspace'),\n  });\n\n  if (!options) {\n    return {\n      ...defaultContext,\n      ...createDefaultWorkspace(),\n    };\n  }\n\n  const { input, logger, logStream, secrets, templateInfo, workspacePath } =\n    options;\n\n  return {\n    ...defaultContext,\n    ...(workspacePath ? { workspacePath } : createDefaultWorkspace()),\n    ...(workspacePath && {\n      createTemporaryDirectory: jest.fn().mockResolvedValue(workspacePath),\n    }),\n    ...(logger && { logger }),\n    ...(logStream && { logStream }),\n    ...(input && { input }),\n    ...(secrets && { secrets }),\n    templateInfo,\n  };\n};\n"],"names":["mockCredentials","loggerToWinstonLogger","mockServices","PassThrough","createMockDirectory"],"mappings":";;;;;;AAgCa,MAAA,uBAAA,GAA0B,CAIrC,OAC+C,KAAA;AAC/C,EAAM,MAAA,WAAA,GAAcA,iCAAgB,IAAK,EAAA,CAAA;AACzC,EAAA,MAAM,cAAiB,GAAA;AAAA,IACrB,MAAQ,EAAAC,mCAAA,CAAsBC,6BAAa,CAAA,MAAA,CAAO,MAAM,CAAA;AAAA,IACxD,SAAA,EAAW,IAAIC,kBAAY,EAAA;AAAA,IAC3B,MAAA,EAAQ,KAAK,EAAG,EAAA;AAAA,IAChB,wBAAA,EAA0B,KAAK,EAAG,EAAA;AAAA,IAClC,OAAO,EAAC;AAAA,IACR,UAAA,EAAY,KAAK,EAAG,EAAA;AAAA,IACpB,uBAAyB,EAAA,MAAM,OAAQ,CAAA,OAAA,CAAQ,WAAW,CAAA;AAAA,GAC5D,CAAA;AAEA,EAAA,MAAM,yBAAyB,OAAO;AAAA,IACpC,aAAe,EAAAC,oCAAA,EAAsB,CAAA,OAAA,CAAQ,WAAW,CAAA;AAAA,GAC1D,CAAA,CAAA;AAEA,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAO,OAAA;AAAA,MACL,GAAG,cAAA;AAAA,MACH,GAAG,sBAAuB,EAAA;AAAA,KAC5B,CAAA;AAAA,GACF;AAEA,EAAA,MAAM,EAAE,KAAO,EAAA,MAAA,EAAQ,WAAW,OAAS,EAAA,YAAA,EAAc,eACvD,GAAA,OAAA,CAAA;AAEF,EAAO,OAAA;AAAA,IACL,GAAG,cAAA;AAAA,IACH,GAAI,aAAA,GAAgB,EAAE,aAAA,KAAkB,sBAAuB,EAAA;AAAA,IAC/D,GAAI,aAAiB,IAAA;AAAA,MACnB,wBAA0B,EAAA,IAAA,CAAK,EAAG,EAAA,CAAE,kBAAkB,aAAa,CAAA;AAAA,KACrE;AAAA,IACA,GAAI,MAAU,IAAA,EAAE,MAAO,EAAA;AAAA,IACvB,GAAI,SAAa,IAAA,EAAE,SAAU,EAAA;AAAA,IAC7B,GAAI,KAAS,IAAA,EAAE,KAAM,EAAA;AAAA,IACrB,GAAI,OAAW,IAAA,EAAE,OAAQ,EAAA;AAAA,IACzB,YAAA;AAAA,GACF,CAAA;AACF;;;;"}