'use strict';

var config = require('@backstage/config');
var luxon = require('luxon');

function readDuration(config$1, key) {
  if (typeof config$1.get(key) === "string") {
    const value = config$1.getString(key);
    const duration = luxon.Duration.fromISO(value);
    if (!duration.isValid) {
      throw new Error(`Invalid duration: ${value}`);
    }
    return duration.toObject();
  }
  return config.readDurationFromConfig(config$1, { key });
}
function readFrequency(config, key) {
  const value = config.get(key);
  if (typeof value === "object" && value.cron) {
    return value;
  }
  if (typeof value === "object" && value.trigger === "manual") {
    return { trigger: "manual" };
  }
  return readDuration(config, key);
}
function readSchedulerServiceTaskScheduleDefinitionFromConfig(config) {
  const frequency = readFrequency(config, "frequency");
  const timeout = readDuration(config, "timeout");
  const initialDelay = config.has("initialDelay") ? readDuration(config, "initialDelay") : void 0;
  const scope = config.getOptionalString("scope");
  if (scope && !["global", "local"].includes(scope)) {
    throw new Error(
      `Only "global" or "local" are allowed for TaskScheduleDefinition.scope, but got: ${scope}`
    );
  }
  return {
    frequency,
    timeout,
    initialDelay,
    scope
  };
}

exports.readSchedulerServiceTaskScheduleDefinitionFromConfig = readSchedulerServiceTaskScheduleDefinitionFromConfig;
//# sourceMappingURL=SchedulerService.cjs.js.map
